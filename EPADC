/***********************************************************************************
	Company Name :- Logsun Systems, Pune
	Developer :- Rahul Gaud
	Program :- Interfacing of ADC with STM32F407VET6
	Connection details :-
												ADC connected to Pin PA0 
												JP39: Pin 1 & 2 Short
												Connect A-B USB Between USB & PC
												O/P Display on Serial Monitor  (e.g. Hercules, Teraterm, etc.) through UART
												Rotate the POT to vary Input
				             
*************************************************************************************/


#include "stm32f4xx.h"
#include "usart.h"
//#include "systick.h"

void GPIO_Configuration(void);
void Delay(__IO uint32_t nCount);

#define ADC1_DR_Address    ((u32)0x4001204C)

void USART_Configuration(void);
void adc_init(void);
u16 readADC1(u8 channel);

unsigned int AD_value;

int main(void)
{
	float voltage;
	USART_Configuration();
	adc_init();

	while(1)
	{
			AD_value= readADC1(16);
	    /* Printf message with AD value to serial port */
		  voltage = AD_value;
			voltage = ((voltage/4096) * 3.3);
	    printf("\r\nAD value = %d\t\t\t Voltage = %.3f V\r\n", AD_value, voltage);
		  Delay(0x1ff0000);   /* delay */
	}
}


void adc_init()
{
	ADC_InitTypeDef ADC_init_structure; //Structure for adc confguration
	GPIO_InitTypeDef GPIO_initStructre; //Structure for analog input pin
	//Clock configuration
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE); //The ADC1 is connected the APB2 peripheral bus thus we will use its clock source
	RCC_AHB1PeriphClockCmd(RCC_AHB1ENR_GPIOAEN, ENABLE); //Clock for the ADC port!! Do not forget about this one ;)
	//Analog pin configuration
	GPIO_StructInit(&GPIO_initStructre);
	GPIO_initStructre.GPIO_Pin = GPIO_Pin_0; //The channel 10 is connected to PA0
	GPIO_initStructre.GPIO_Mode = GPIO_Mode_AN; //The PA0 pin is configured in analog mode
	GPIO_initStructre.GPIO_PuPd = GPIO_PuPd_NOPULL; //We don't need any pull up or pull down
	GPIO_Init(GPIOA, &GPIO_initStructre); //Affecting the port with the initialization structure configuration
	//ADC structure configuration
	ADC_DeInit();
	ADC_init_structure.ADC_DataAlign = ADC_DataAlign_Right; //data converted will be shifted to right
	ADC_init_structure.ADC_Resolution = ADC_Resolution_12b; //Input voltage is converted into a 12bit number giving a maximum value of 4096
	ADC_init_structure.ADC_ContinuousConvMode = ENABLE; //the conversion is continuous, the input data is converted more than once
	ADC_init_structure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1; // conversion is synchronous with TIM1 and CC1 (actually I'm not sure about this one :/)
	ADC_init_structure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None; //no trigger for conversion
	ADC_init_structure.ADC_NbrOfConversion = 1; //No. of Conversion 
	ADC_init_structure.ADC_ScanConvMode = DISABLE; //The scan is configured in one channel
	ADC_Init(ADC1, &ADC_init_structure); //Initialize ADC with the previous configuration
	//Enable ADC conversion
	ADC_Cmd(ADC1, ENABLE);
	//Select the channel to be read from
	ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_144Cycles);
}

u16 readADC1(u8 channel) {
	 ADC_SoftwareStartConv(ADC1);//Start the conversion
	 while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC));//Processing the conversion
	 return ADC_GetConversionValue(ADC1); //Return the converted data
}

void Delay(__IO uint32_t nCount)
{
  while(nCount--)
  {

  }
}

#ifdef  USE_FULL_ASSERT

/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{ 
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

  /* Infinite loop */
  while (1)
  {

  }
}
#endif
